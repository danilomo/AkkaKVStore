import akka.actor.Actor;
import akka.actor.ActorSystem;
import akka.actor.ActorSelection;
import akka.actor.Props;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import scala.concurrent.duration.Duration;
import akka.pattern.PatternsCS;
import com.emnify.kvcluster.messages.*;
import akka.util.Timeout;

port = 3002;

Config config = ConfigFactory.parseString( "akka.remote.netty.tcp.port=" + port).withFallback(ConfigFactory.load("client"));

ActorSystem system = ActorSystem.create("kvstore", config);

ActorSelection ref = system.actorSelection("akka.tcp://kvstore@127.0.0.1:2551/user/frontend");

/*
String[] strs = {"Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Distrito Federal", "Espírito Santo", "Goiás", "Maranhão", "Mato Grosso", "Mato Grosso do Sul", "Minas Gerais", "Pará", "Paraíba", "Paraná", "Pernambuco", "Piauí", "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rondônia", "Roraima", "Santa Catarina", "São Paulo", "Sergipe", "Tocantins"};

for(int i = 0; i < strs.length; i++){
    String str = strs[i];
    ref.tell(new PutMessage(str, str), Actor.noSender());
}
*/

void put(String k, String v){
    ref.tell(new PutMessage(k,v), Actor.noSender());
}

void getp(String key){    
    Timeout t = new Timeout(Duration.create(5, TimeUnit.SECONDS));

    CompletableFuture future1 = PatternsCS.ask(ref, new GetMessage(key), 1000).toCompletableFuture();

    Object s = future1.get();
    print(s);
}

void takep(String key){    
    Timeout t = new Timeout(Duration.create(3600, TimeUnit.SECONDS));

    CompletableFuture future1 = PatternsCS.ask(ref, new TakeMessage(key, 5), t).toCompletableFuture();

    Object s = future1.get();
    print(s);
}

void printContents(){
    printContents(2553);
    printContents(2554);
    printContents(2555);
    printContents(2556);
}

void printContents(int port){
    ActorSelection ref = system.actorSelection("akka.tcp://kvstore@127.0.0.1:" + port + "/user/storage");
    Timeout t = new Timeout(Duration.create(5, TimeUnit.SECONDS));

    CompletableFuture future1 = PatternsCS.ask(ref, "get-contents", 1000).toCompletableFuture();

    String s = future1.get();
    print(s);
}

void stopNode(int port){
    ActorSelection ref = system.actorSelection("akka.tcp://kvstore@127.0.0.1:" + port + "/user/stop");
    ref.tell( new StopNodeMessage(), Actor.noSender() );
}
